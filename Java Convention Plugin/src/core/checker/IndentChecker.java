/* Generated By:JavaCC: Do not edit this line. IndentChecker.java */
package core.checker;

import java.io.*;
import java.util.Vector;
import core.rules.*;
import core.warning.*;

/**
 * Grammar to parse Java version 1.5
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class IndentChecker extends Checker implements IndentCheckerConstants {
  boolean chkIndent = true;
  int l = 0;
  boolean inSwitch = false;
  static final char singleComment = 1;

  static final char inComment = 3;
  boolean inDo = false;
  boolean inTry = false;
  boolean inFor = false;
  Token otherToken = null;
  Token firstSpaces = null;
  Token lastSpaces = null;

  static final char newlineTok = 2;
  boolean endOfLine = false;
  String shouldNewLine = "";
  boolean inLongLine = true;
  boolean inWrapLine = false;
  boolean inCode = false;

  public IndentChecker(String fileName)
  {
    this (System.in);
    try
    {
      ReInit(new FileInputStream(new File(fileName)));
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }

  public void resetVariables()
  {
    warnings.clear();
    chkIndent = true;
    inSwitch = false;
    l = 0; // l is level of braces
    inDo = false;
    inTry = false;
    otherToken = null;
    firstSpaces = null;
    lastSpaces = null;
    endOfLine = false;
    shouldNewLine = "";
    inLongLine = true;
    inWrapLine = false;
    inCode = false;
  }

  public Vector < Warning > getWarnings()
  {
    return warnings;
  }

  final public void SpaChk(String correctSpaces) throws ParseException {
  Token t;
  String addition = "";
  String comparedString = "";
  int noOfComment = 0;
  int preEndLine =-1;
  Vector < Integer > lines = new Vector < Integer > ();
  firstSpaces = null;
    label_1:
    while (true) {
      if (jj_2_1(2147483647)) {
        ;
      } else {
        break label_1;
      }
          if (getToken(0).kind != SPACES)
          {
            otherToken = getToken(0);
            firstSpaces = null;
          }
          if (otherToken == null)
          {
            otherToken = new Token();
            otherToken.endColumn = 0;
          }
      t = jj_consume_token(SPACES);
          //preEndLine = t.endLine;
          //Store lines of current group of spaces
          for (int i = t.beginLine + 1;; i++)
          {
            //Out(i+" ");
            if (t.image.endsWith("\u005cn"))
            {
              if (i > t.endLine) break;
            }
            else
            {
              if (i > t.endLine - 1) break;
            }
            if (t.beginColumn != 1)
            {
              if (lines.size() != 0)
              {
                if (i != ((Integer) lines.get(lines.size() - 1)).intValue())
                {
                  lines.add(new Integer(i));
                }
              }
              else
              {
                lines.add(new Integer(i));
              }
            }
          }
          //Out("|");

          if (firstSpaces == null)
          {
            firstSpaces = getToken(0);
            if (otherToken.endColumn + 1 != firstSpaces.beginColumn)
            { // have comment
              comparedString += singleComment;
            }
          }
          if ((getToken(1).kind != SPACES) && (getToken(1).image != ""))
          {
            lastSpaces = getToken(0);
            otherToken = getToken(1);
            if (lastSpaces.endLine == otherToken.beginLine)
            {
              if (lastSpaces.endColumn + 1 != otherToken.beginColumn)
              {
                shouldNewLine = Character.toString(newlineTok);
              }
              else
              {
                shouldNewLine = "";
              }
            }
            else
            {
              if (otherToken.beginColumn != 1)
              {
                shouldNewLine = Character.toString(newlineTok);
              }
              else
              {
                shouldNewLine = "";
              }
            }
          }
          else
          {
            shouldNewLine = "";
          }
          comparedString += (t.image + shouldNewLine + singleComment);
    }
        if (firstSpaces != null)
        {
          comparedSpaceProcess(comparedString, correctSpaces, firstSpaces.beginLine, firstSpaces.beginColumn, lines);
        }
        else
        {
          if (correctSpaces.equals(""))
          {}
          else
          {
            comparedSpaceProcess("", correctSpaces, getToken(1).beginLine, getToken(1).beginColumn, lines);
          }
        }
  }

  final public void FormalCheck(String input, int beginLine, int subline, boolean chkIndent, boolean inWrapLine) throws ParseException {
    int currentLine = beginLine + subline;
    StringBuilder sb = new StringBuilder(input);
    // Comment Counting
    int noOfComment = 0;
    for (int i = 0; i < sb.length(); i++)
    {
      if (sb.charAt(i) == singleComment)
      {
        noOfComment++;
      }
    }
    if (noOfComment > 1)
    {
      Out("" + noOfComment + " ");
      warnings.add(new WarningIndent(new Position(currentLine,
      currentLine, - 1, - 1), WarningSpecify.INDENT_SINGLE_LINE_COMMENT, null));
    }
    // indentation
    String correctIndent = "";
    if (!inWrapLine)
    {
      for (int i = 0; i < l; i++)
      {
        correctIndent += "    ";
      }
    }
    else
    {
    }
    String startSpaces = "";
    boolean blankLine = false;
    for (int i = 0; i < sb.length(); i++)
    {
      if (sb.charAt(i) == ' ')
      startSpaces += " ";
      else if (sb.charAt(i) == '\u005ct')
      startSpaces += "    ";
      else
      {
        break;
      }
    }
    if (!startSpaces.equals(correctIndent) && chkIndent && !blankLine)
    {
      String [ ] args = new String [ 2 ];
      if (!inWrapLine)
      {
        args [ 0 ] = "false";
        args [ 1 ] = String.valueOf(correctIndent.length() / 4);
        warnings.add(new WarningIndent(new Position(currentLine,
        currentLine, - 1, - 1), WarningSpecify.INDENT_INDENT, args));
      }
      else
      {
      }
    }
    if (subline != 0)
    {
      for (int i = 0; i < sb.length();)
      {
        if (sb.charAt(i) == ' ')
        sb.deleteCharAt(i);
        else
        break;
      }
    }
    if (sb.length() > 0)
    {
      // newline
      if (sb.charAt(sb.length() - 1) == newlineTok)
      {
        warnings.add(new WarningIndent(new Position(currentLine,
        currentLine, - 1, - 1), WarningSpecify.INDENT_END_LINE_COMMENT, null));
      }
      // space at the end of line
      if (endOfLine && !chkIndent)
      {
        String temp = sb.toString();
        if (temp.contains(" ") || temp.contains("\u005ct"))
        {
          if (!temp.contains(String.valueOf(singleComment)))
          {
            warnings.add(new WarningIndent(new Position(currentLine,
            currentLine, - 1, - 1), WarningSpecify.INDENT_END_SPACE, null));
          }
        }
      }
    }
    // space before comment
    if (subline == 0)
    {
      for (int i = 0; i < sb.length(); i++)
      {
        if (sb.charAt(i) == singleComment)
        {
          if (inCode)
          {
            if (i != 1)
            {
              String [ ] args = new String [ 1 ];
              args [ 0 ] = String.valueOf(1);
              warnings.add(new WarningIndent(new Position(
              currentLine, currentLine, - 1, - 1), WarningSpecify.INDENT_COMMENT_SPACE, args));
              for (int j = 0; i < sb.length();)
              {
                if (sb.charAt(j) == ' ')
                sb.deleteCharAt(j);
                else
                break;
              }
            }
          }
          else
          {
            if (i != 0)
            {
              String [ ] args = new String [ 1 ];
              args [ 0 ] = String.valueOf(0);
              warnings.add(new WarningIndent(new Position(
              currentLine, currentLine, - 1, - 1), WarningSpecify.INDENT_COMMENT_SPACE, args));
              for (int j = 0; i < sb.length();)
              {
                if (sb.charAt(j) == ' ')
                sb.deleteCharAt(j);
                else
                break;
              }
            }
          }
        }
      }
    }
  }

  final public void comparedSpaceProcess(String comparedSpace, String correctSpace, int beginLine, int beginColumn, Vector < Integer > lines) throws ParseException {
    StringBuilder sb = new StringBuilder(comparedSpace);
    int lnNotConsidered = 0;
    int blankLines = 0;
    boolean chkIndent = false;
    if (sb.length() > 0)
    {
      sb.deleteCharAt(sb.length() - 1);
    }
    comparedSpace = sb.toString();
    int sublines = 0;
    if (comparedSpace.contains("\u005cn"))
    {
      endOfLine = true;
    }
    else
    {
      endOfLine = false;
    }
    String [ ] comparedSpaces = comparedSpace.split("\u005cn", - 1);
    String [ ] correctSpaces = correctSpace.split("\u005cn", - 1);
    if (correctSpace.contains("\u005cn"))
    {
      blankLines = correctSpaces.length - 2;
      //Out(blankLines+"\n");
    }
    else
    {
      blankLines = 0;
    }
    int a = 0;
    for (int i = 0; i < comparedSpaces.length; i++)
    {
      //if(i!=0) endOfLine = false;
      if (i != 0 && correctSpace.contains("\u005cn"))
      {
        chkIndent = true;
      }
      else
      {
        chkIndent = false;
      }
      if (comparedSpaces [ i ].contains(String.valueOf(singleComment)))
      {
        FormalCheck(comparedSpaces [ i ], beginLine, sublines, chkIndent,
        inWrapLine);
      }
      else
      {
        if (i == 0 || i == comparedSpaces.length - 1)
        {
          FormalCheck(comparedSpaces [ i ], beginLine, sublines,
          chkIndent, inWrapLine);
        }
        else
        {
          if (i > blankLines && a < lines.size())
          {
            //Out(lines.size()+"|\n");
            String [ ] args = new String [ 0 ];
            lnNotConsidered++;
            warnings.add(new WarningIndent(new Position(lines.get(a),
            lines.get(a), - 1, - 1), WarningSpecify.INDENT_NOT_BLANK_LINE, args));
            a++;
          }
          else
          {
            a++;
          }
        }
      }
      sublines++;
    }
    // new line checking
    if (comparedSpaces.length > 0)
    {
      for (int i = 1; i < comparedSpaces.length; i++)
      {
        if (comparedSpaces [ i ].contains(Character.toString(singleComment)))
        {
          lnNotConsidered++;
        }
      }
      if (!inCode)
      lnNotConsidered++;
      if (comparedSpaces.length - lnNotConsidered < correctSpaces.length)
      {
        if (blankLines > 0)
        {
          String [ ] args = new String [ 0 ];
          warnings.add(new WarningIndent(new Position(beginLine,
          beginLine, - 1, - 1), WarningSpecify.INDENT_BLANK_LINE, args));
        }
        else
        {
          String [ ] args = new String [ 0 ];
          warnings.add(new WarningIndent(new Position(beginLine,
          beginLine, - 1, - 1), WarningSpecify.INDENT_NEW_LINE, args));
        }
      }
      if (inWrapLine)
      lnNotConsidered++;
      if (comparedSpaces.length - lnNotConsidered > correctSpaces.length)
      {
        String [ ] args = new String [ 0 ];
        warnings.add(new WarningIndent(new Position(beginLine,
        beginLine, - 1, - 1), WarningSpecify.INDENT_NOT_NEW_LINE, args));
      }
      if (comparedSpaces.length - lnNotConsidered == correctSpaces.length
      && !endOfLine)
      {
        if (comparedSpaces [ 0 ].contains(Character.toString(singleComment)))
        {
          String [ ] args = new String [ 0 ];
          warnings.add(new WarningIndent(new Position(beginLine,
          beginLine, - 1, - 1), WarningSpecify.INDENT_INNER_COMMNET, args));
        }
        else
        {
          if (comparedSpaces [ 0 ].compareTo(correctSpaces [ 0 ]) != 0
          && !inWrapLine)
          {
            String [ ] args = new String [ 2 ];
            args [ 0 ] = String.valueOf(correctSpaces [ 0 ].length());
            args [ 1 ] = getToken(1).image;
            warnings.add(new WarningIndent(new Position(getToken(0).beginLine,
            beginLine, getToken(0).beginColumn, - 1), WarningSpecify.INDENT_SPACE, args));
          }
        }
      }
    }
  }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/
/*
 * Program structuring syntax follows.
 */
  final public void CompilationUnit() throws ParseException {
    SpaChk("");
    if (jj_2_2(5)) {
      PackageDeclaration();
    } else {
      ;
    }
    ImportDeclaration();
    label_2:
    while (true) {
      TypeDeclaration();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        break label_2;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 125:
      jj_consume_token(125);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STUFF_TO_IGNORE:
      jj_consume_token(STUFF_TO_IGNORE);
      break;
    default:
      ;
    }
    jj_consume_token(0);
  }

  final public void PackageDeclaration() throws ParseException {
    inCode = true;
    jj_consume_token(PACKAGE);
    SpaChk(" ");
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        break label_3;
      }
      Name();
    }
    jj_consume_token(SEMICOLON);
    OutNewLine("\u005cn");
  }

  final public void ImportDeclaration() throws ParseException {
    inCode = true;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        break label_4;
      }
      jj_consume_token(IMPORT);
      SpaChk(" ");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
        SpaChk(" ");
        break;
      default:
        ;
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          break label_5;
        }
        Name();
      }
      SpaChk("");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        SpaChk("");
        jj_consume_token(STAR);
        break;
      default:
        ;
      }
      jj_consume_token(SEMICOLON);
      if (jj_2_3(2147483647)) {
        OutNewLine("");
      } else {
        OutNewLine("\u005cn");
      }
    }
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
  final public int Modifiers() throws ParseException {
  int modifiers = 0;
    label_6:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        SpaChk(" ");
        modifiers |= ModifierSet.PUBLIC;
        break;
      case STATIC:
        jj_consume_token(STATIC);
        SpaChk(" ");
        modifiers |= ModifierSet.STATIC;
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        SpaChk(" ");
        modifiers |= ModifierSet.PROTECTED;
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        SpaChk(" ");
        modifiers |= ModifierSet.PRIVATE;
        break;
      case FINAL:
        jj_consume_token(FINAL);
        SpaChk(" ");
        modifiers |= ModifierSet.FINAL;
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        SpaChk(" ");
        modifiers |= ModifierSet.ABSTRACT;
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        SpaChk(" ");
        modifiers |= ModifierSet.SYNCHRONIZED;
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
        SpaChk(" ");
        modifiers |= ModifierSet.NATIVE;
        break;
      case TRANSIENT:
        jj_consume_token(TRANSIENT);
        SpaChk(" ");
        modifiers |= ModifierSet.TRANSIENT;
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
        SpaChk(" ");
        modifiers |= ModifierSet.VOLATILE;
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        SpaChk(" ");
        modifiers |= ModifierSet.STRICTFP;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return modifiers;}
    throw new Error("Missing return statement in function");
  }

/*
 * Declaration syntax follows.
 */
  final public void TypeDeclaration() throws ParseException {
  {
    inCode = true;
  }
  int modifiers;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case ABSTRACT:
    case CLASS:
    case ENUM:
    case FINAL:
    case INTERFACE:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case AT:
      modifiers = Modifiers();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case INTERFACE:
        ClassOrInterfaceDeclaration(modifiers);
        break;
      case ENUM:
        EnumDeclaration(modifiers);
        break;
      case AT:
        AnnotationTypeDeclaration(modifiers);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ClassOrInterfaceDeclaration(int modifiers) throws ParseException {
  boolean isInterface = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      jj_consume_token(CLASS);
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
      isInterface = true;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    SpaChk(" ");
    jj_consume_token(IDENTIFIER);
    SpaChk(" ");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TypeParameters();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      ExtendsList(isInterface);
      SpaChk(" ");
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      ImplementsList(isInterface);
      SpaChk(" ");
      break;
    default:
      ;
    }
    ClassOrInterfaceBody(isInterface);
  }

  final public void ExtendsList(boolean isInterface) throws ParseException {
  boolean extendsMoreThanOne = false;
    jj_consume_token(EXTENDS);
    SpaChk(" ");
    ClassOrInterfaceType();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_7;
      }
      jj_consume_token(COMMA);
      ClassOrInterfaceType();
      extendsMoreThanOne = true;
    }
    if (extendsMoreThanOne && !isInterface)
    {if (true) throw new ParseException("A class cannot extend more than one other class");}
  }

  final public void ImplementsList(boolean isInterface) throws ParseException {
    jj_consume_token(IMPLEMENTS);
    SpaChk(" ");
    ClassOrInterfaceType();
    if (jj_2_5(2147483647)) {
      SpaChk("");
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_8;
        }
        jj_consume_token(COMMA);
        SpaChk(" ");
        ClassOrInterfaceType();
      }
    } else {
      Out("");
    }
    if (isInterface)
    {if (true) throw new ParseException("An interface cannot implement other interfaces");}
  }

  final public void EnumDeclaration(int modifiers) throws ParseException {
    jj_consume_token(ENUM);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      ImplementsList(false);
      break;
    default:
      ;
    }
    EnumBody();
  }

  final public void EnumBody() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case IDENTIFIER:
      EnumConstant();
      label_9:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(COMMA);
        EnumConstant();
      }
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACES:
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case LT:
          ;
          break;
        default:
          break label_10;
        }
        ClassOrInterfaceBodyDeclaration(false);
      }
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
  }

  final public void EnumConstant() throws ParseException {
    Modifiers();
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACES:
    case LPAREN:
      Arguments();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      ClassOrInterfaceBody(false);
      break;
    default:
      ;
    }
  }

  final public void TypeParameters() throws ParseException {
    jj_consume_token(LT);
    SpaChk("");
    TypeParameter();
    SpaChk("");
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_11;
      }
      jj_consume_token(COMMA);
      SpaChk(" ");
      TypeParameter();
      SpaChk("");
    }
    jj_consume_token(GT);
  }

  final public void TypeParameter() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      TypeBound();
      break;
    default:
      ;
    }
  }

  final public void TypeBound() throws ParseException {
    jj_consume_token(EXTENDS);
    ClassOrInterfaceType();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        break label_12;
      }
      jj_consume_token(BIT_AND);
      ClassOrInterfaceType();
    }
  }

  final public void ClassOrInterfaceBody(boolean isInterface) throws ParseException {
    jj_consume_token(LBRACE);
    OutNewLine("{");
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACES:
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case LT:
        ;
        break;
      default:
        break label_13;
      }
      ClassOrInterfaceBodyDeclaration(isInterface);
    }
    jj_consume_token(RBRACE);
    if (jj_2_7(2147483647)) {
      SpaChk("");
    } else if (jj_2_8(2147483647)) {
      OutNewLine("}");
    } else {
      OutNewLine("\u005cn");
    }
  }

  final public void ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {
  boolean isNestedInterface = false;
  int modifiers;
    if (jj_2_11(4)) {
      Initializer();
      if (isInterface)
      {if (true) throw new ParseException("An interface cannot have initializers");}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
      case AT:
      case LT:
        modifiers = Modifiers();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          ClassOrInterfaceDeclaration(modifiers);
          break;
        case ENUM:
          EnumDeclaration(modifiers);
          break;
        default:
          if (jj_2_9(2147483647)) {
            ConstructorDeclaration();
          } else if (jj_2_10(2147483647)) {
            FieldDeclaration(modifiers);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case VOID:
            case IDENTIFIER:
            case LT:
              MethodDeclaration(modifiers);
              break;
            case AT:
              AnnotationTypeDeclaration(modifiers);
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void FieldDeclaration(int modifiers) throws ParseException {
    Type();
    SpaChk(" ");
    VariableDeclarator();
    SpaChk("");
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_14;
      }
      jj_consume_token(COMMA);
      SpaChk(" ");
      VariableDeclarator();
      SpaChk("");
    }
    jj_consume_token(SEMICOLON);
    OutNewLine(";");
  }

  final public void VariableDeclarator() throws ParseException {
    VariableDeclaratorId();
    if (jj_2_12(2147483647)) {
      SpaChk(" ");
      jj_consume_token(ASSIGN);
      SpaChk(" ");
      VariableInitializer();
    } else {
      Out("");
    }
  }

  final public void Array() throws ParseException {
    SpaChk("");
    jj_consume_token(LBRACKET);
    SpaChk("");
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      Expression();
      SpaChk("");
    }
    jj_consume_token(RBRACKET);
  }

  final public void VariableDeclaratorId() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_16:
    while (true) {
      if (jj_2_13(6)) {
        ;
      } else {
        break label_16;
      }
      Array();
    }
  }

  final public void VariableInitializer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      ArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayInitializer() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      VariableInitializer();
      SpaChk("");
      label_17:
      while (true) {
        if (jj_2_14(5)) {
          ;
        } else {
          break label_17;
        }
        jj_consume_token(COMMA);
        SpaChk(" ");
        VariableInitializer();
      }
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACES:
    case COMMA:
      SpaChk("");
      jj_consume_token(COMMA);
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
  }

  final public void MethodDeclaration(int modifiers) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TypeParameters();
      break;
    default:
      ;
    }
    ResultType();
    SpaChk(" ");
    MethodDeclarator();
    if (jj_2_15(2147483647)) {
      SpaChk(" ");
      jj_consume_token(THROWS);
      SpaChk(" ");
      NameList();
    } else {
      Out("");
    }
    if (jj_2_16(2147483647)) {
      SpaChk("");
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACES:
      case LBRACE:
        Block();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MethodDeclarator() throws ParseException {
    jj_consume_token(IDENTIFIER);
    SpaChk("");
    jj_consume_token(LPAREN);
    SpaChk("");
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
      case AT:
        ;
        break;
      default:
        break label_18;
      }
      FormalParameters();
    }
    SpaChk("");
    jj_consume_token(RPAREN);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        break label_19;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

  final public void FormalParameters() throws ParseException {
    FormalParameter();
    label_20:
    while (true) {
      if (jj_2_17(3)) {
        ;
      } else {
        break label_20;
      }
      SpaChk("");
      jj_consume_token(COMMA);
      SpaChk(" ");
    }
  }

  final public void FormalParameter() throws ParseException {
    Modifiers();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
    case AT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case AT:
        Annotation();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      SpaChk(" ");
      break;
    default:
      ;
    }
    Type();
    SpaChk(" ");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELLIPSIS:
      jj_consume_token(ELLIPSIS);
      SpaChk(" ");
      break;
    default:
      ;
    }
    VariableDeclaratorId();
  }

  final public void ConstructorDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TypeParameters();
      SpaChk("");
      break;
    default:
      ;
    }
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    SpaChk("");
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
      case AT:
        ;
        break;
      default:
        break label_21;
      }
      FormalParameters();
    }
    SpaChk("");
    jj_consume_token(RPAREN);
    if (jj_2_18(2147483647)) {
      SpaChk(" ");
      jj_consume_token(THROWS);
      SpaChk(" ");
      NameList();
      SpaChk(" ");
    } else {
      SpaChk(" ");
    }
    jj_consume_token(LBRACE);
    OutNewLine("{");
    if (jj_2_19(2147483647)) {
      ExplicitConstructorInvocation();
    } else {
      ;
    }
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACES:
      case ABSTRACT:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RETURN:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRANSIENT:
      case TRUE:
      case TRY:
      case VOID:
      case VOLATILE:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        ;
        break;
      default:
        break label_22;
      }
      BlockStatement();
    }
    jj_consume_token(RBRACE);
    OutNewLine("}");
  }

  final public void ExplicitConstructorInvocation() throws ParseException {
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        break label_23;
      }
      jj_consume_token(IDENTIFIER);
      jj_consume_token(DOT);
    }
    if (jj_2_20(2)) {
      jj_consume_token(THIS);
      jj_consume_token(DOT);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TypeArguments();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      jj_consume_token(THIS);
      break;
    case SUPER:
      jj_consume_token(SUPER);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    Arguments();
    SpaChk("");
    jj_consume_token(SEMICOLON);
    OutNewLine(";");
  }

  final public void Initializer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
      break;
    default:
      ;
    }
    Block();
  }

/*
 * Type, name and expression syntax follows.
 */
  final public void Type() throws ParseException {
    if (jj_2_21(4)) {
      ReferenceType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        PrimitiveType();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ReferenceType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      PrimitiveType();
      label_24:
      while (true) {
        if (jj_2_22(4)) {
          ;
        } else {
          break label_24;
        }
        Array();
      }
      break;
    case IDENTIFIER:
      ClassOrInterfaceType();
      label_25:
      while (true) {
        if (jj_2_23(4)) {
          ;
        } else {
          break label_25;
        }
        Array();
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ClassOrInterfaceType() throws ParseException {
    jj_consume_token(IDENTIFIER);
    if (jj_2_24(2147483647)) {
      SpaChk("");
      TypeArguments();
    } else {
      ;
    }
    label_26:
    while (true) {
      if (jj_2_25(2147483647)) {
        ;
      } else {
        break label_26;
      }
      jj_consume_token(DOT);
      SpaChk("");
      jj_consume_token(IDENTIFIER);
      if (jj_2_26(2147483647)) {
        SpaChk("");
        TypeArguments();
        SpaChk(" ");
      } else {
        ;
      }
    }
  }

  final public void TypeArguments() throws ParseException {
    jj_consume_token(LT);
    SpaChk("");
    TypeArgument();
    SpaChk("");
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_27;
      }
      jj_consume_token(COMMA);
      SpaChk("");
      TypeArgument();
      SpaChk("");
    }
    jj_consume_token(GT);
  }

  final public void TypeArgument() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      ReferenceType();
      break;
    case HOOK:
      jj_consume_token(HOOK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
      case SUPER:
        WildcardBounds();
        break;
      default:
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void WildcardBounds() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      ReferenceType();
      break;
    case SUPER:
      jj_consume_token(SUPER);
      ReferenceType();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case BYTE:
      jj_consume_token(BYTE);
      break;
    case SHORT:
      jj_consume_token(SHORT);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case LONG:
      jj_consume_token(LONG);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ResultType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      Type();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Name() throws ParseException {
    jj_consume_token(IDENTIFIER);
    if (jj_2_27(2147483647)) {
      SpaChk("");
      jj_consume_token(DOT);
      SpaChk("");
    } else {
      Out("");
    }
  }

  final public void NameList() throws ParseException {
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        break label_28;
      }
      Name();
    }
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_29;
      }
      jj_consume_token(COMMA);
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          break label_30;
        }
        Name();
      }
    }
  }

/*
 * Expression syntax follows.
 */
  final public void Expression() throws ParseException {
    ConditionalExpression();
    if (jj_2_28(2147483647)) {
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACES:
        case ASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
          ;
          break;
        default:
          break label_31;
        }
        AssignmentOperator();
        Expression();
      }
    } else {
      Out("");
    }
  }

//
  final public void AssignmentOperator() throws ParseException {
    SpaChk(" ");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      break;
    case LSHIFTASSIGN:
      jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    SpaChk(" ");
  }

//
  final public void ConditionalExpression() throws ParseException {
    ConditionalOrExpression();
    if (jj_2_29(2147483647)) {
      SpaChk(" ");
      jj_consume_token(HOOK);
      SpaChk(" ");
      Expression();
      SpaChk(" ");
      jj_consume_token(COLON);
      SpaChk(" ");
      ConditionalExpression();
    } else {
      ;
    }
  }

//
  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_32:
    while (true) {
      if (jj_2_30(2147483647)) {
        ;
      } else {
        break label_32;
      }
      SpaChk(" ");
      jj_consume_token(SC_OR);
      SpaChk(" ");
      ConditionalAndExpression();
    }
  }

//
  final public void ConditionalAndExpression() throws ParseException {
    InclusiveOrExpression();
    label_33:
    while (true) {
      if (jj_2_31(2147483647)) {
        ;
      } else {
        break label_33;
      }
      SpaChk(" ");
      jj_consume_token(SC_AND);
      SpaChk(" ");
      InclusiveOrExpression();
    }
  }

//
  final public void InclusiveOrExpression() throws ParseException {
    ExclusiveOrExpression();
    label_34:
    while (true) {
      if (jj_2_32(2147483647)) {
        ;
      } else {
        break label_34;
      }
      SpaChk(" ");
      jj_consume_token(BIT_OR);
      SpaChk(" ");
      ExclusiveOrExpression();
    }
  }

//
  final public void ExclusiveOrExpression() throws ParseException {
    AndExpression();
    label_35:
    while (true) {
      if (jj_2_33(2147483647)) {
        ;
      } else {
        break label_35;
      }
      SpaChk(" ");
      jj_consume_token(XOR);
      SpaChk(" ");
      AndExpression();
    }
  }

//
  final public void AndExpression() throws ParseException {
    EqualityExpression();
    label_36:
    while (true) {
      if (jj_2_34(2147483647)) {
        ;
      } else {
        break label_36;
      }
      SpaChk(" ");
      jj_consume_token(BIT_AND);
      SpaChk(" ");
      EqualityExpression();
    }
  }

//
  final public void EqualityExpression() throws ParseException {
    InstanceOfExpression();
    label_37:
    while (true) {
      if (jj_2_35(2147483647)) {
        ;
      } else {
        break label_37;
      }
      SpaChk(" ");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        break;
      case NE:
        jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      SpaChk(" ");
      InstanceOfExpression();
    }
  }

//
  final public void InstanceOfExpression() throws ParseException {
    RelationalExpression();
    if (jj_2_36(2147483647)) {
      SpaChk(" ");
      jj_consume_token(INSTANCEOF);
      SpaChk(" ");
      Type();
    } else {
      ;
    }
  }

//
  final public void RelationalExpression() throws ParseException {
    ShiftExpression();
    label_38:
    while (true) {
      if (jj_2_37(2147483647)) {
        ;
      } else {
        break label_38;
      }
      SpaChk(" ");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        break;
      case GT:
        jj_consume_token(GT);
        break;
      case LE:
        jj_consume_token(LE);
        break;
      case GE:
        jj_consume_token(GE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      SpaChk(" ");
      ShiftExpression();
    }
  }

//
  final public void ShiftExpression() throws ParseException {
    AdditiveExpression();
    label_39:
    while (true) {
      if (jj_2_38(2147483647)) {
        ;
      } else {
        break label_39;
      }
      SpaChk(" ");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        jj_consume_token(LSHIFT);
        break;
      case RSIGNEDSHIFT:
        jj_consume_token(RSIGNEDSHIFT);
        break;
      case RUNSIGNEDSHIFT:
        jj_consume_token(RUNSIGNEDSHIFT);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      SpaChk(" ");
      AdditiveExpression();
    }
  }

//
  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_40:
    while (true) {
      if (jj_2_39(2147483647)) {
        ;
      } else {
        break label_40;
      }
      SpaChk(" ");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case PLUSASSIGN:
        jj_consume_token(PLUSASSIGN);
        break;
      case MINUSASSIGN:
        jj_consume_token(MINUSASSIGN);
        break;
      case ASSIGN:
        jj_consume_token(ASSIGN);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      SpaChk(" ");
      MultiplicativeExpression();
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_41:
    while (true) {
      if (jj_2_40(2147483647)) {
        ;
      } else {
        break label_41;
      }
      SpaChk(" ");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case SLASH:
        jj_consume_token(SLASH);
        break;
      case REM:
        jj_consume_token(REM);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      SpaChk(" ");
      UnaryExpression();
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      SpaChk("");
      UnaryExpression();
      break;
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      UnaryExpressionNotPlusMinus();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PreIncrementExpression() throws ParseException {
    jj_consume_token(INCR);
    SpaChk("");
    PrimaryExpression();
  }

  final public void PreDecrementExpression() throws ParseException {
    jj_consume_token(DECR);
    SpaChk("");
    PrimaryExpression();
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
        SpaChk("");
        break;
      case BANG:
        jj_consume_token(BANG);
        SpaChk("");
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
    default:
      if (jj_2_41(2147483647)) {
        CastExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          PostfixExpression();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookahead() throws ParseException {
    if (jj_2_42(2147483647)) {
      jj_consume_token(LPAREN);
      PrimitiveType();
    } else if (jj_2_43(2147483647)) {
      jj_consume_token(LPAREN);
      label_42:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          break label_42;
        }
        Name();
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        label_43:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ;
            break;
          default:
            break label_43;
          }
          Name();
        }
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case THIS:
          jj_consume_token(THIS);
          break;
        case SUPER:
          jj_consume_token(SUPER);
          break;
        case NEW:
          jj_consume_token(NEW);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          Literal();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PostfixExpression() throws ParseException {
    PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        jj_consume_token(INCR);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      ;
    }
  }

  final public void CastExpression() throws ParseException {
    if (jj_2_44(2147483647)) {
      jj_consume_token(LPAREN);
      SpaChk("");
      Type();
      SpaChk("");
      jj_consume_token(RPAREN);
      SpaChk("");
      UnaryExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        SpaChk("");
        Type();
        SpaChk("");
        jj_consume_token(RPAREN);
        SpaChk("");
        UnaryExpressionNotPlusMinus();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PrimaryExpression() throws ParseException {
    PrimaryPrefix();
    label_44:
    while (true) {
      if (jj_2_45(2)) {
        ;
      } else {
        break label_44;
      }
      PrimarySuffix();
    }
  }

  final public void MemberSelector() throws ParseException {
    jj_consume_token(DOT);
    TypeArguments();
    jj_consume_token(IDENTIFIER);
  }

  final public void PrimaryPrefix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      Literal();
      break;
    default:
      if (jj_2_46(2147483647)) {
        label_45:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ;
            break;
          default:
            break label_45;
          }
          jj_consume_token(IDENTIFIER);
          SpaChk("");
          jj_consume_token(DOT);
          SpaChk("");
        }
        jj_consume_token(THIS);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUPER:
          jj_consume_token(SUPER);
          jj_consume_token(DOT);
          jj_consume_token(IDENTIFIER);
          break;
        default:
          if (jj_2_47(2147483647)) {
            ClassOrInterfaceType();
            jj_consume_token(DOT);
            jj_consume_token(SUPER);
            jj_consume_token(DOT);
            jj_consume_token(IDENTIFIER);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LPAREN:
              jj_consume_token(LPAREN);
              SpaChk("");
              Expression();
              SpaChk("");
              jj_consume_token(RPAREN);
              break;
            case NEW:
              AllocationExpression();
              break;
            default:
              if (jj_2_48(2147483647)) {
                ResultType();
                SpaChk("");
                jj_consume_token(DOT);
                SpaChk("");
                jj_consume_token(CLASS);
                SpaChk("");
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case IDENTIFIER:
                  label_46:
                  while (true) {
                    Name();
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case IDENTIFIER:
                      ;
                      break;
                    default:
                      break label_46;
                    }
                  }
                  break;
                default:
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
          }
        }
      }
    }
  }

  final public void PrimarySuffix() throws ParseException {
    if (jj_2_49(2147483647)) {
      jj_consume_token(DOT);
      jj_consume_token(SUPER);
    } else if (jj_2_50(2147483647)) {
      jj_consume_token(DOT);
      jj_consume_token(THIS);
    } else if (jj_2_51(2)) {
      jj_consume_token(DOT);
      AllocationExpression();
    } else if (jj_2_52(3)) {
      MemberSelector();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        SpaChk("");
        Expression();
        SpaChk("");
        jj_consume_token(RBRACKET);
        break;
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
        break;
      case SPACES:
      case LPAREN:
        Arguments();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    case CHARACTER_LITERAL:
      jj_consume_token(CHARACTER_LITERAL);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    case NULL:
      NullLiteral();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NullLiteral() throws ParseException {
    jj_consume_token(NULL);
  }

  final public void Arguments() throws ParseException {
    SpaChk("");
    jj_consume_token(LPAREN);
    SpaChk("");
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_47;
      }
      ArgumentList();
    }
    SpaChk("");
    jj_consume_token(RPAREN);
  }

  final public void ArgumentList() throws ParseException {
    Expression();
    if (jj_2_53(2147483647)) {
      label_48:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACES:
        case COMMA:
          ;
          break;
        default:
          break label_48;
        }
        SpaChk("");
        jj_consume_token(COMMA);
        SpaChk(" ");
      }
    } else {
      Out("");
    }
  }

  final public void AllocationExpression() throws ParseException {
    if (jj_2_54(2147483647)) {
      jj_consume_token(NEW);
      SpaChk(" ");
      Type();
      SpaChk("");
      label_49:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ;
          break;
        default:
          break label_49;
        }
        ArrayDimsAndInits();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
        SpaChk(" ");
        ClassOrInterfaceType();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          TypeArguments();
          break;
        default:
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ArrayDimsAndInits();
          break;
        case SPACES:
        case LPAREN:
          Arguments();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
            ClassOrInterfaceBody(false);
            break;
          default:
            ;
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  final public void ArrayDimsAndInits() throws ParseException {
    ArrayInitializer();
  }

/*
 * Statement syntax follows.
 */
  final public void Statement() throws ParseException {
    if (jj_2_55(2147483647)) {
      LabeledStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
        AssertStatement();
        break;
      case SPACES:
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        EmptyStatement();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        StatementExpression();
        SpaChk("");
        jj_consume_token(SEMICOLON);
        OutNewLine(";");
        break;
      case SWITCH:
        SwitchStatement();
        break;
      case IF:
        IfStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      case DO:
        DoStatement();
        break;
      case FOR:
        ForStatement();
        break;
      case BREAK:
        BreakStatement();
        break;
      case CONTINUE:
        ContinueStatement();
        break;
      case RETURN:
        ReturnStatement();
        break;
      case THROW:
        ThrowStatement();
        break;
      case SYNCHRONIZED:
        SynchronizedStatement();
        break;
      case TRY:
        TryStatement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AssertStatement() throws ParseException {
    jj_consume_token(ASSERT);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      Expression();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void LabeledStatement() throws ParseException {
    jj_consume_token(IDENTIFIER);
    SpaChk("");
    jj_consume_token(COLON);
    OutNewLine(":");
    Statement();
  }

  final public void Block() throws ParseException {
    SpaChk(" ");
    jj_consume_token(LBRACE);
    OutNewLine("{");
    label_50:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACES:
      case ABSTRACT:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RETURN:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRANSIENT:
      case TRUE:
      case TRY:
      case VOID:
      case VOLATILE:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        ;
        break;
      default:
        break label_50;
      }
      BlockStatement();
    }
    jj_consume_token(RBRACE);
    OutNewLine("}");
  }

  final public void BlockStatement() throws ParseException {
    if (jj_2_56(2147483647)) {
      LocalVariableDeclaration();
      jj_consume_token(SEMICOLON);
      OutNewLine(";");
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACES:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        Statement();
        break;
      case CLASS:
      case INTERFACE:
        ClassOrInterfaceDeclaration(0);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void LocalVariableDeclaration() throws ParseException {
    Modifiers();
    Type();
    SpaChk(" ");
    VariableDeclarator();
    SpaChk("");
    label_51:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_51;
      }
      jj_consume_token(COMMA);
      SpaChk(" ");
      VariableDeclarator();
      SpaChk("");
    }
  }

  final public void EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
    OutNewLine(";");
  }

  final public void StatementExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      PrimaryExpression();
      if (jj_2_57(2147483647)) {
        SpaChk("");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          jj_consume_token(INCR);
          break;
        case DECR:
          jj_consume_token(DECR);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_58(2147483647)) {
        AssignmentOperator();
        Expression();
      } else {
        Out("");
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SwitchStatement() throws ParseException {
  int temp = l;
  inSwitch = true;
    jj_consume_token(SWITCH);
    SpaChk(" ");
    jj_consume_token(LPAREN);
    SpaChk("");
    Expression();
    SpaChk("");
    jj_consume_token(RPAREN);
    SpaChk(" ");
    jj_consume_token(LBRACE);
    OutNewLine("{");
    label_52:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        break label_52;
      }
      SwitchLabel();
      label_53:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACES:
        case ABSTRACT:
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRANSIENT:
        case TRUE:
        case TRY:
        case VOID:
        case VOLATILE:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
          ;
          break;
        default:
          break label_53;
        }
        BlockStatement();
      }
    }
    jj_consume_token(RBRACE);
    OutNewLine("}");
  }

  final public void SwitchLabel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      l++;
      SpaChk(" ");
      Expression();
      SpaChk(" ");
      jj_consume_token(COLON);
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      l++;
      SpaChk(" ");
      jj_consume_token(COLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    OutNewLine("");
  }

  final public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    SpaChk(" ");
    jj_consume_token(LPAREN);
    SpaChk("");
    Expression();
    SpaChk("");
    jj_consume_token(RPAREN);
    if (jj_2_59(2147483647)) {
      Block();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACES:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        l++;
        OutNewLine("");
        l--;
        Statement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_61(2147483647)) {
      jj_consume_token(ELSE);
      if (jj_2_60(2147483647)) {
        Block();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACES:
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
          l++;
          OutNewLine("");
          l--;
          Statement();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      Out("");
    }
  }

  final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE);
    SpaChk(" ");
    jj_consume_token(LPAREN);
    SpaChk("");
    Expression();
    SpaChk("");
    jj_consume_token(RPAREN);
    if (jj_2_62(2147483647)) {
      Statement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACES:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        SpaChk(" ");
        Statement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void DoStatement() throws ParseException {
    jj_consume_token(DO);
    Statement();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    SpaChk("");
    jj_consume_token(SEMICOLON);
    OutNewLine(";");
  }

  final public void ForStatement() throws ParseException {
    jj_consume_token(FOR);
    SpaChk(" ");
    jj_consume_token(LPAREN);
    SpaChk("");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case NATIVE:
    case NEW:
    case NULL:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case STRICTFP:
    case SUPER:
    case SYNCHRONIZED:
    case THIS:
    case TRANSIENT:
    case TRUE:
    case VOID:
    case VOLATILE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case INCR:
    case DECR:
      ForInit();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
    SpaChk(" ");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
    SpaChk(" ");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case INCR:
    case DECR:
      ForUpdate();
      break;
    default:
      ;
    }
    SpaChk("");
    jj_consume_token(RPAREN);
    if (jj_2_63(2147483647)) {
      Statement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACES:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
      l++;
        OutNewLine(")");
      l--;
        Statement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ForInit() throws ParseException {
    if (jj_2_64(2147483647)) {
      LocalVariableDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        StatementExpressionList();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void StatementExpressionList() throws ParseException {
    StatementExpression();
    label_54:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_54;
      }
      jj_consume_token(COMMA);
      StatementExpression();
    }
  }

  final public void ForUpdate() throws ParseException {
    StatementExpressionList();
  }

  final public void BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
    if (jj_2_65(2147483647)) {
      SpaChk(" ");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        ;
      }
    } else {
      Out("");
    }
    SpaChk("");
    jj_consume_token(SEMICOLON);
    OutNewLine(";");
  }

  final public void ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      ;
    }
    SpaChk("");
    jj_consume_token(SEMICOLON);
    OutNewLine(";");
  }

  final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
    if (jj_2_66(2147483647)) {
      SpaChk("");
    } else {
      SpaChk(" ");
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      SpaChk("");
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
    OutNewLine(";");
  }

  final public void ThrowStatement() throws ParseException {
    jj_consume_token(THROW);
    SpaChk(" ");
    Expression();
    SpaChk("");
    jj_consume_token(SEMICOLON);
    OutNewLine(";");
  }

  final public void SynchronizedStatement() throws ParseException {
    jj_consume_token(SYNCHRONIZED);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Block();
  }

  final public void TryStatement() throws ParseException {
  inTry = true;
    jj_consume_token(TRY);
    Block();
    label_55:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        break label_55;
      }
      jj_consume_token(CATCH);
      SpaChk(" ");
      jj_consume_token(LPAREN);
      SpaChk("");
      FormalParameter();
      SpaChk("");
      jj_consume_token(RPAREN);
      Block();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      jj_consume_token(FINALLY);
      Block();
      break;
    default:
      ;
    }
  }

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
  final public void RUNSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT &&
        ((MyIndentToken) getToken(1)).realKind == RUNSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

  final public void RSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT &&
        ((MyIndentToken) getToken(1)).realKind == RSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

/* Annotation syntax follows. */
  final public void Annotation() throws ParseException {
    if (jj_2_67(2147483647)) {
      NormalAnnotation();
    } else if (jj_2_68(2147483647)) {
      SingleMemberAnnotation();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        MarkerAnnotation();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void NormalAnnotation() throws ParseException {
    jj_consume_token(AT);
    label_56:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        break label_56;
      }
      Name();
    }
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      MemberValuePairs();
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void MarkerAnnotation() throws ParseException {
    jj_consume_token(AT);
    label_57:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        break label_57;
      }
      Name();
    }
  }

  final public void SingleMemberAnnotation() throws ParseException {
    jj_consume_token(AT);
    label_58:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        break label_58;
      }
      Name();
    }
    jj_consume_token(LPAREN);
    MemberValue();
    jj_consume_token(RPAREN);
  }

  final public void MemberValuePairs() throws ParseException {
    MemberValuePair();
    label_59:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_59;
      }
      jj_consume_token(COMMA);
      MemberValuePair();
    }
  }

  final public void MemberValuePair() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    MemberValue();
  }

  final public void MemberValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      Annotation();
      break;
    case LBRACE:
      MemberValueArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ConditionalExpression();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MemberValueArrayInitializer() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case AT:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      MemberValue();
      label_60:
      while (true) {
        if (jj_2_69(2)) {
          ;
        } else {
          break label_60;
        }
        jj_consume_token(COMMA);
        MemberValue();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        ;
      }
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
  }

/* Annotation Types. */
  final public void AnnotationTypeDeclaration(int modifiers) throws ParseException {
    jj_consume_token(AT);
    jj_consume_token(INTERFACE);
    jj_consume_token(IDENTIFIER);
    AnnotationTypeBody();
  }

  final public void AnnotationTypeBody() throws ParseException {
    jj_consume_token(LBRACE);
    label_61:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        break label_61;
      }
      AnnotationTypeMemberDeclaration();
    }
    jj_consume_token(RBRACE);
  }

  final public void AnnotationTypeMemberDeclaration() throws ParseException {
  int modifiers;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case CLASS:
    case DOUBLE:
    case ENUM:
    case FINAL:
    case FLOAT:
    case INT:
    case INTERFACE:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case IDENTIFIER:
    case AT:
      modifiers = Modifiers();
      if (jj_2_70(2147483647)) {
        Type();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _DEFAULT:
          DefaultValue();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          ClassOrInterfaceDeclaration(modifiers);
          break;
        case ENUM:
          EnumDeclaration(modifiers);
          break;
        case AT:
          AnnotationTypeDeclaration(modifiers);
          break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:
          FieldDeclaration(modifiers);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefaultValue() throws ParseException {
    jj_consume_token(_DEFAULT);
    MemberValue();
  }

  final public void Out(String s) throws ParseException {
    System.out.print(s);
  }

  final public void OutWhiteLine() throws ParseException {
    SpaChk("\u005cn");
  }

  final public void FirstLine(String s) throws ParseException {
  String a = "\u005cn";
    if (jj_2_71(2147483647)) {
      l--;
    } else {
      Out("");
    }
    if (jj_2_72(2147483647)) {
      l--;
    } else {
      Out("");
    }
    if (s.compareTo("\u005cn") == 0)
    {
      a += "\u005cn";
    }
    if (s.compareTo("{") == 0)
    {
      l++;
    }
    for (int i = 0; i < l; i++)
    {
      a += "    ";
    }
    SpaChk(a);
  }

  final public void OutNewLine(String s) throws ParseException {
    if (jj_2_73(2147483647)) {
    if (s.equals("}"))
    {
      SpaChk(" ");
    }
    else
    {
      FirstLine(s);
    }
    } else if (jj_2_74(2147483647)) {
    if (s.equals("}") && inDo)
    {
      SpaChk(" ");
      inDo = false;
    }
    else
    {
      FirstLine(s);
    }
    } else if (jj_2_75(2147483647)) {
    if (s.equals("}") && inTry)
    {
      SpaChk(" ");
      inTry = false;
    }
    else
    {
      FirstLine(s);
    }
    } else {
      FirstLine(s);
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3R_139() {
    return false;
  }

  private boolean jj_3_73() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(VOLATILE)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(TRANSIENT)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_3R_302()) return true;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_138() {
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(NATIVE)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_298() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) return true;
    }
    if (jj_3R_81()) return true;
    if (jj_3R_296()) return true;
    return false;
  }

  private boolean jj_3R_296() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_298()) {
    jj_scanpos = xsp;
    if (jj_3R_299()) {
    jj_scanpos = xsp;
    if (jj_3R_300()) {
    jj_scanpos = xsp;
    if (jj_3R_301()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(ABSTRACT)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_40() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_72() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(FINAL)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(PRIVATE)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) return true;
    }
    }
    if (jj_3R_81()) return true;
    if (jj_3R_296()) return true;
    return false;
  }

  private boolean jj_3_71() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) return true;
    }
    return false;
  }

  private boolean jj_3R_176() {
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_3R_296()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_297()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(PROTECTED)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(STATIC)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    return false;
  }

  private boolean jj_3_39() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_375() {
    if (jj_3R_389()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) return true;
    }
    }
    }
    }
    if (jj_3R_81()) return true;
    if (jj_3R_290()) return true;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_3R_290()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_295()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IMPORT)) return true;
    return false;
  }

  private boolean jj_3R_160() {
    return false;
  }

  private boolean jj_3_38() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_389() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) return true;
    }
    }
    if (jj_3R_81()) return true;
    if (jj_3R_288()) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_3R_95()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_374() {
    if (jj_3R_328()) return true;
    return false;
  }

  private boolean jj_3R_373() {
    if (jj_3R_330()) return true;
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_3R_288()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_289()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_372() {
    if (jj_3R_326()) return true;
    return false;
  }

  private boolean jj_3R_371() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_370() {
    if (jj_3R_95()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_375()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_37() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_368() {
    if (jj_3R_97()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_370()) {
    jj_scanpos = xsp;
    if (jj_3R_371()) {
    jj_scanpos = xsp;
    if (jj_3R_372()) {
    jj_scanpos = xsp;
    if (jj_3R_373()) {
    jj_scanpos = xsp;
    if (jj_3R_374()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_361() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_368()) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    if (jj_3R_81()) return true;
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3_36() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(INSTANCEOF)) return true;
    return false;
  }

  private boolean jj_3R_353() {
    if (jj_3R_361()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(PACKAGE)) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_103()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_3R_284()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_287()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_353()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_346()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_3R_273()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_283()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_35() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    return false;
  }

  private boolean jj_3_69() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_405() {
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_69()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(83)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    if (jj_3R_81()) return true;
    if (jj_3R_268()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_405()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_34() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(BIT_AND)) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_3R_268()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_272()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3_33() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_3R_259()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_267()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_403() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_404() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_403()) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_247()) return true;
    return false;
  }

  private boolean jj_3_32() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  private boolean jj_3R_402() {
    if (jj_3R_403()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_404()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_3R_247()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_258()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_399() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_225()) return true;
    return false;
  }

  private boolean jj_3_31() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SC_AND)) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(AT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_399()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_3R_225()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_246()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_400() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_398() {
    if (jj_3R_402()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_200()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(AT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_400()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_30() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SC_OR)) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_200()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_224()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_397() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_scan_token(AT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_101()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(AT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_397()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_398()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3_29() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(HOOK)) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_scan_token(AT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) return true;
    }
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_192()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_197()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_190()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_147()) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_173()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_28() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ASIGN_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_388() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_384() {
    if (jj_3R_394()) return true;
    return false;
  }

  private boolean jj_3R_387() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_358()) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_98()) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_107()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_387()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_388()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_162() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_183()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_157()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_147()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3_66() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_147()) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_3R_147()) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_360() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_367()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_383() {
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_359() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3_27() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DOT)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_257()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_350() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_359()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_360()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_65() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) return true;
    }
    if (jj_3R_81()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_394() {
    if (jj_3R_282()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3R_401() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_97()) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_3R_232()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_401()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_3R_282()) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_266() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_270()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) return true;
    }
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_63() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_3R_168()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) return true;
    }
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_386() {
    if (jj_3R_104()) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_385() {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_252()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_81()) return true;
    xsp = jj_scanpos;
    if (jj_3R_383()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_81()) return true;
    xsp = jj_scanpos;
    if (jj_3R_384()) jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_385()) {
    jj_scanpos = xsp;
    if (jj_3R_386()) return true;
    }
    return false;
  }

  private boolean jj_3_26() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LT)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_62() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_85()) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_195()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_147()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3_25() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_85()) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_166()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_382() {
    if (jj_3R_81()) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3_24() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LT)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_381() {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_81()) return true;
    if (jj_3R_132()) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_147()) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_381()) {
    jj_scanpos = xsp;
    if (jj_3R_382()) return true;
    }
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_380() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_81()) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3_60() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_393() {
    if (jj_3R_104()) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_392() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_379() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_392()) {
    jj_scanpos = xsp;
    if (jj_3R_393()) return true;
    }
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_87()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    return false;
  }

  private boolean jj_3_59() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_378() {
    if (jj_3R_104()) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_377() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_147()) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_377()) {
    jj_scanpos = xsp;
    if (jj_3R_378()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_379()) {
    jj_scanpos = xsp;
    if (jj_3R_380()) return true;
    }
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_396() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_112()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    if (jj_3R_114()) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_395() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_147()) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_338() {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3_18() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THROWS)) return true;
    return false;
  }

  private boolean jj_3R_390() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_395()) {
    jj_scanpos = xsp;
    if (jj_3R_396()) return true;
    }
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_366() {
    if (jj_scan_token(ELLIPSIS)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_391() {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_376() {
    if (jj_3R_390()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_391()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_335() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_350()) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_3R_349()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_147()) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_376()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3_58() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_3R_105()) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_327() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_333()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_334()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_335()) {
    jj_scanpos = xsp;
    if (jj_3R_336()) return true;
    }
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_104()) return true;
    xsp = jj_scanpos;
    if (jj_3R_337()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_338()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3_57() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_3R_98()) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_369() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_365() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_3R_369()) return true;
    }
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    return false;
  }

  private boolean jj_3R_358() {
    if (jj_3R_97()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_365()) jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    if (jj_3R_81()) return true;
    xsp = jj_scanpos;
    if (jj_3R_366()) jj_scanpos = xsp;
    if (jj_3R_226()) return true;
    return false;
  }

  private boolean jj_3R_352() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_3R_262()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_263()) {
    jj_scanpos = xsp;
    if (jj_3R_264()) {
    jj_scanpos = xsp;
    if (jj_3R_265()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_349() {
    if (jj_3R_358()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_351() {
    if (jj_3R_349()) return true;
    return false;
  }

  private boolean jj_3_16() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_341() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_351()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_352()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_201()) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_15() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THROWS)) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_97()) return true;
    if (jj_3R_95()) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_201()) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_202()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3_56() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_97()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_95()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_342() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_350()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_194()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_340() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_329() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_340()) jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_341()) return true;
    xsp = jj_scanpos;
    if (jj_3R_342()) {
    jj_scanpos = xsp;
    if (jj_3R_343()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_344()) {
    jj_scanpos = xsp;
    if (jj_3R_345()) return true;
    }
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_146()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_82()) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_104()) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_147()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_248()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_3R_243()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_3R_242()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_3R_241()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_240()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_238()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_3R_236()) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_147()) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_235()) return true;
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_234()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_108()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_233()) return true;
    return false;
  }

  private boolean jj_3_55() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_232()) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_231()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_230()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_229()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_226()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) return true;
    }
    return false;
  }

  private boolean jj_3R_195() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_201()) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_3R_95()) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_201()) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_339()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_325() {
    if (jj_3R_330()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_78()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_3R_329()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_3R_114()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_313()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3_54() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(NEW)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_95()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_292()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) return true;
    }
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_323() {
    if (jj_3R_328()) return true;
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_3R_327()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    return false;
  }

  private boolean jj_3_53() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_95()) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_291()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_3R_326()) return true;
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_3R_97()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_320()) {
    jj_scanpos = xsp;
    if (jj_3R_321()) {
    jj_scanpos = xsp;
    if (jj_3R_322()) {
    jj_scanpos = xsp;
    if (jj_3R_323()) {
    jj_scanpos = xsp;
    if (jj_3R_324()) {
    jj_scanpos = xsp;
    if (jj_3R_325()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_184() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_198()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_3R_147()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) return true;
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_318() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_3R_167()) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_149()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_364() {
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_3R_318()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_314()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_315()) {
    jj_scanpos = xsp;
    if (jj_3R_316()) {
    jj_scanpos = xsp;
    if (jj_3R_317()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_363() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_193()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_169() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_142()) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_147()) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_142()) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_143()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_97()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_363()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_364()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DOT)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_3R_318()) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(SPACES)) return true;
    return false;
  }

  private boolean jj_3R_348() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_357()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_281() {
    Token xsp;
    if (jj_3R_286()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_286()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_3R_92()) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_3R_74()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_147()) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(SPACES)) return true;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_347()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(83)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_348()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_46() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_331() {
    if (jj_3R_245()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_326() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_331()) jj_scanpos = xsp;
    if (jj_3R_332()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_285()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_269() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) {
    jj_scanpos = xsp;
    if (jj_3R_281()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_356() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_362() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_132()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_355() {
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_362()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_3R_356()) return true;
    }
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_3R_269()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_95()) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_302()) return true;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_95()) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_296()) return true;
    return false;
  }

  private boolean jj_3R_308() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_310()) {
    jj_scanpos = xsp;
    if (jj_3R_311()) return true;
    }
    return false;
  }

  private boolean jj_3R_354() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_312() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_354()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_3R_262()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_312()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_3R_245()) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_244()) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_3R_219()) return true;
    }
    if (jj_3R_81()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_81()) return true;
    xsp = jj_scanpos;
    if (jj_3R_220()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) jj_scanpos = xsp;
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3_43() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_88()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_152()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_42() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_151()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_75() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CATCH)) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_3R_309()) return true;
    return false;
  }

  private boolean jj_3R_304() {
    if (jj_3R_308()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_74() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(7)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_303() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_306()) {
    jj_scanpos = xsp;
    if (jj_3R_307()) return true;
    }
    if (jj_3R_296()) return true;
    return false;
  }

  private boolean jj_3R_302() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_303()) {
    jj_scanpos = xsp;
    if (jj_3R_304()) {
    jj_scanpos = xsp;
    if (jj_3R_305()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(STRICTFP)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_81()) return true;
    if (jj_3R_262()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public IndentCheckerTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;

  /** Constructor with InputStream. */
  public IndentChecker(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public IndentChecker(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new IndentCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor. */
  public IndentChecker(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new IndentCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public IndentChecker(IndentCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(IndentCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
